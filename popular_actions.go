// Code generated by actionlint/scripts/generate-popular-actions. DO NOT EDIT.

package actionlint

// PopularActions is data set of known popular actions. Keys are specs (owner/repo@ref) of actions
// and values are their metadata.
var PopularActions = map[string]*ActionMetadata{
	"8398a7/action-slack@v1": {
		Name: "action-slack",
		Inputs: map[string]ActionMetadataInputRequired{
			"failedMention": false,
			"payload":       false,
			"text":          false,
			"type":          false,
		},
	},
	"8398a7/action-slack@v2": {
		Name: "action-slack",
		Inputs: map[string]ActionMetadataInputRequired{
			"author_name":       false,
			"channel":           false,
			"icon_emoji":        false,
			"icon_url":          false,
			"mention":           false,
			"only_mention_fail": false,
			"payload":           false,
			"status":            false,
			"text":              false,
			"username":          false,
		},
	},
	"8398a7/action-slack@v3": {
		Name: "action-slack",
		Inputs: map[string]ActionMetadataInputRequired{
			"author_name":     false,
			"channel":         false,
			"custom_payload":  false,
			"fields":          false,
			"github_base_url": false,
			"github_token":    false,
			"icon_emoji":      false,
			"icon_url":        false,
			"if_mention":      false,
			"job_name":        false,
			"mention":         false,
			"status":          true,
			"text":            false,
			"username":        false,
		},
	},
	"Azure/container-scan@v0": {
		Name: "Container image scan",
		Inputs: map[string]ActionMetadataInputRequired{
			"image-name":         true,
			"password":           false,
			"run-quality-checks": false,
			"severity-threshold": false,
			"token":              false,
			"username":           false,
		},
		Outputs: map[string]struct{}{
			"check-run-url":    {},
			"scan-report-path": {},
		},
	},
	"Azure/functions-action@v1": {
		Name: "Azure Functions Action",
		Inputs: map[string]ActionMetadataInputRequired{
			"app-name":                       true,
			"enable-oryx-build":              false,
			"package":                        false,
			"publish-profile":                false,
			"respect-funcignore":             false,
			"respect-pom-xml":                false,
			"scm-do-build-during-deployment": false,
			"slot-name":                      false,
		},
		Outputs: map[string]struct{}{
			"app-url": {},
		},
	},
	"EnricoMi/publish-unit-test-result-action@v1": {
		Name: "Publish Unit Test Results",
		Inputs: map[string]ActionMetadataInputRequired{
			"check_name":                       false,
			"check_run_annotations":            false,
			"check_run_annotations_branch":     false,
			"comment_mode":                     false,
			"comment_on_pr":                    false,
			"comment_title":                    false,
			"commit":                           false,
			"compare_to_earlier_commit":        false,
			"deduplicate_classes_by_file_name": false,
			"fail_on":                          false,
			"files":                            true,
			"github_retries":                   false,
			"github_token":                     false,
			"hide_comments":                    false,
			"pull_request_build":               false,
			"report_individual_runs":           false,
			"seconds_between_github_reads":     false,
			"seconds_between_github_writes":    false,
			"test_changes_limit":               false,
		},
	},
	"JamesIves/github-pages-deploy-action@releases/v3": {
		Name: "Deploy to GitHub Pages",
		Inputs: map[string]ActionMetadataInputRequired{
			"ACCESS_TOKEN":     false,
			"BASE_BRANCH":      false,
			"BRANCH":           true,
			"CLEAN":            false,
			"CLEAN_EXCLUDE":    false,
			"COMMIT_MESSAGE":   false,
			"FOLDER":           true,
			"GITHUB_TOKEN":     false,
			"GIT_CONFIG_EMAIL": false,
			"GIT_CONFIG_NAME":  false,
			"LFS":              false,
			"PRESERVE":         false,
			"REPOSITORY_NAME":  false,
			"SILENT":           false,
			"SINGLE_COMMIT":    false,
			"SSH":              false,
			"TARGET_FOLDER":    false,
			"WORKSPACE":        false,
		},
		Outputs: map[string]struct{}{
			"DEPLOYMENT_STATUS": {},
		},
	},
	"JamesIves/github-pages-deploy-action@releases/v4": {
		Name: "Deploy to GitHub Pages",
		Inputs: map[string]ActionMetadataInputRequired{
			"branch":           true,
			"clean":            false,
			"clean-exclude":    false,
			"commit-message":   false,
			"dry-run":          false,
			"folder":           true,
			"git-config-email": false,
			"git-config-name":  false,
			"repository-name":  false,
			"silent":           false,
			"single-commit":    false,
			"ssh-key":          false,
			"target-folder":    false,
			"token":            false,
			"workspace":        false,
		},
		Outputs: map[string]struct{}{
			"deployment-status": {},
		},
	},
	"ReactiveCircus/android-emulator-runner@v1": {
		Name: "Android Emulator Runner",
		Inputs: map[string]ActionMetadataInputRequired{
			"api-level":          true,
			"arch":               false,
			"disable-animations": false,
			"headless":           false,
			"profile":            false,
			"script":             true,
			"target":             false,
		},
	},
	"ReactiveCircus/android-emulator-runner@v2": {
		Name: "Android Emulator Runner",
		Inputs: map[string]ActionMetadataInputRequired{
			"api-level":              true,
			"arch":                   false,
			"avd-name":               false,
			"cmake":                  false,
			"cores":                  false,
			"disable-animations":     false,
			"disable-linux-hw-accel": false,
			"disable-spellchecker":   false,
			"emulator-build":         false,
			"emulator-options":       false,
			"force-avd-creation":     false,
			"ndk":                    false,
			"profile":                false,
			"ram-size":               false,
			"script":                 true,
			"sdcard-path-or-size":    false,
			"target":                 false,
			"working-directory":      false,
		},
	},
	"actions-cool/issues-helper@v1": {
		Name: "Issues Helper",
		Inputs: map[string]ActionMetadataInputRequired{
			"actions":         false,
			"assignees":       false,
			"body":            false,
			"body-includes":   false,
			"comment-auth":    false,
			"comment-id":      false,
			"contents":        false,
			"direction":       false,
			"inactive-day":    false,
			"inactive-label":  false,
			"issue-assignee":  false,
			"issue-creator":   false,
			"issue-mentioned": false,
			"issue-number":    false,
			"issue-state":     false,
			"labels":          false,
			"state":           false,
			"title":           false,
			"title-includes":  false,
			"token":           false,
			"update-mode":     false,
		},
		Outputs: map[string]struct{}{
			"comment-id":   {},
			"comments":     {},
			"issue-number": {},
		},
	},
	"actions-cool/issues-helper@v2": {
		Name: "Issues Helper",
		Inputs: map[string]ActionMetadataInputRequired{
			"actions":            false,
			"assignee-includes":  false,
			"assignees":          false,
			"body":               false,
			"body-includes":      false,
			"close-issue":        false,
			"comment-auth":       false,
			"comment-id":         false,
			"contents":           false,
			"count-comments":     false,
			"count-lables":       false,
			"direction":          false,
			"duplicate-command":  false,
			"duplicate-labels":   false,
			"inactive-day":       false,
			"inactive-label":     false,
			"issue-assignee":     false,
			"issue-contents":     false,
			"issue-creator":      false,
			"issue-mentioned":    false,
			"issue-number":       false,
			"issue-state":        false,
			"labels":             false,
			"lock-reason":        false,
			"random-to":          false,
			"remove-labels":      false,
			"require-permission": false,
			"state":              false,
			"title":              false,
			"title-includes":     false,
			"token":              false,
			"update-mode":        false,
		},
		Outputs: map[string]struct{}{
			"check-result": {},
			"comment-id":   {},
			"comments":     {},
			"issue-number": {},
		},
	},
	"actions-rs/audit-check@v1": {
		Name: "rust-audit-check",
		Inputs: map[string]ActionMetadataInputRequired{
			"token": true,
		},
	},
	"actions-rs/cargo@v1": {
		Name: "rust-cargo",
		Inputs: map[string]ActionMetadataInputRequired{
			"args":      false,
			"command":   true,
			"toolchain": false,
			"use-cross": false,
		},
	},
	"actions-rs/clippy-check@v1": {
		Name: "rust-clippy-check",
		Inputs: map[string]ActionMetadataInputRequired{
			"args":      false,
			"name":      false,
			"token":     true,
			"toolchain": false,
			"use-cross": false,
		},
	},
	"actions-rs/toolchain@v1": {
		Name: "rust-toolchain",
		Inputs: map[string]ActionMetadataInputRequired{
			"components": false,
			"default":    false,
			"override":   false,
			"profile":    false,
			"target":     false,
			"toolchain":  false,
		},
		Outputs: map[string]struct{}{
			"cargo":      {},
			"rustc":      {},
			"rustc_hash": {},
			"rustup":     {},
		},
	},
	"actions/cache@v1": {
		Name: "Cache",
		Inputs: map[string]ActionMetadataInputRequired{
			"key":          true,
			"path":         true,
			"restore-keys": false,
		},
		Outputs: map[string]struct{}{
			"cache-hit": {},
		},
	},
	"actions/cache@v2": {
		Name: "Cache",
		Inputs: map[string]ActionMetadataInputRequired{
			"key":               true,
			"path":              true,
			"restore-keys":      false,
			"upload-chunk-size": false,
		},
		Outputs: map[string]struct{}{
			"cache-hit": {},
		},
	},
	"actions/checkout@v1": {
		Name: "Checkout",
		Inputs: map[string]ActionMetadataInputRequired{
			"clean":       false,
			"fetch-depth": false,
			"lfs":         false,
			"path":        false,
			"ref":         false,
			"repository":  false,
			"submodules":  false,
			"token":       false,
		},
	},
	"actions/checkout@v2": {
		Name: "Checkout",
		Inputs: map[string]ActionMetadataInputRequired{
			"clean":               false,
			"fetch-depth":         false,
			"lfs":                 false,
			"path":                false,
			"persist-credentials": false,
			"ref":                 false,
			"repository":          false,
			"ssh-key":             false,
			"ssh-known-hosts":     false,
			"ssh-strict":          false,
			"submodules":          false,
			"token":               false,
		},
	},
	"actions/delete-package-versions@v1": {
		Name: "Delete Package Versions",
		Inputs: map[string]ActionMetadataInputRequired{
			"num-old-versions-to-delete": false,
			"owner":                      false,
			"package-name":               false,
			"package-version-ids":        false,
			"repo":                       false,
			"token":                      false,
		},
	},
	"actions/download-artifact@v1": {
		Name: "Download a Build Artifact",
		Inputs: map[string]ActionMetadataInputRequired{
			"name": true,
			"path": false,
		},
	},
	"actions/download-artifact@v2": {
		Name: "Download a Build Artifact",
		Inputs: map[string]ActionMetadataInputRequired{
			"name": false,
			"path": false,
		},
	},
	"actions/first-interaction@v1": {
		Name: "First interaction",
		Inputs: map[string]ActionMetadataInputRequired{
			"issue-message": false,
			"pr-message":    false,
			"repo-token":    true,
		},
	},
	"actions/github-script@v1": {
		Name: "GitHub Script",
		Inputs: map[string]ActionMetadataInputRequired{
			"debug":           false,
			"github-token":    false,
			"previews":        false,
			"result-encoding": false,
			"script":          true,
			"user-agent":      false,
		},
		Outputs: map[string]struct{}{
			"result": {},
		},
	},
	"actions/github-script@v2": {
		Name: "GitHub Script",
		Inputs: map[string]ActionMetadataInputRequired{
			"debug":           false,
			"github-token":    false,
			"previews":        false,
			"result-encoding": false,
			"script":          true,
			"user-agent":      false,
		},
		Outputs: map[string]struct{}{
			"result": {},
		},
	},
	"actions/github-script@v3": {
		Name: "GitHub Script",
		Inputs: map[string]ActionMetadataInputRequired{
			"debug":           false,
			"github-token":    false,
			"previews":        false,
			"result-encoding": false,
			"script":          true,
			"user-agent":      false,
		},
		Outputs: map[string]struct{}{
			"result": {},
		},
	},
	"actions/github-script@v4": {
		Name: "GitHub Script",
		Inputs: map[string]ActionMetadataInputRequired{
			"debug":           false,
			"github-token":    false,
			"previews":        false,
			"result-encoding": false,
			"script":          true,
			"user-agent":      false,
		},
		Outputs: map[string]struct{}{
			"result": {},
		},
	},
	"actions/labeler@v2": {
		Name: "Pull Request Labeler",
		Inputs: map[string]ActionMetadataInputRequired{
			"configuration-path": false,
			"repo-token":         false,
			"sync-labels":        false,
		},
	},
	"actions/labeler@v3": {
		Name: "Labeler",
		Inputs: map[string]ActionMetadataInputRequired{
			"configuration-path": false,
			"repo-token":         false,
			"sync-labels":        false,
		},
	},
	"actions/setup-dotnet@v1": {
		Name: "Setup .NET Core SDK",
		Inputs: map[string]ActionMetadataInputRequired{
			"config-file":        false,
			"dotnet-version":     false,
			"include-prerelease": false,
			"owner":              false,
			"source-url":         false,
		},
	},
	"actions/setup-go@v1": {
		Name: "Setup Go environment",
		Inputs: map[string]ActionMetadataInputRequired{
			"go-version": false,
			"version":    false,
		},
	},
	"actions/setup-go@v2": {
		Name: "Setup Go environment",
		Inputs: map[string]ActionMetadataInputRequired{
			"go-version": false,
			"stable":     false,
			"token":      false,
		},
	},
	"actions/setup-java@v1": {
		Name: "Setup Java JDK",
		Inputs: map[string]ActionMetadataInputRequired{
			"architecture":    false,
			"gpg-passphrase":  false,
			"gpg-private-key": false,
			"java-package":    false,
			"java-version":    true,
			"jdkFile":         false,
			"server-id":       false,
			"server-password": false,
			"server-username": false,
			"settings-path":   false,
		},
		Outputs: map[string]struct{}{
			"path":    {},
			"version": {},
		},
	},
	"actions/setup-java@v2": {
		Name: "Setup Java JDK",
		Inputs: map[string]ActionMetadataInputRequired{
			"architecture":       false,
			"check-latest":       false,
			"distribution":       true,
			"gpg-passphrase":     false,
			"gpg-private-key":    false,
			"java-package":       false,
			"java-version":       true,
			"jdkFile":            false,
			"overwrite-settings": false,
			"server-id":          false,
			"server-password":    false,
			"server-username":    false,
			"settings-path":      false,
		},
		Outputs: map[string]struct{}{
			"distribution": {},
			"path":         {},
			"version":      {},
		},
	},
	"actions/setup-node@v1": {
		Name: "Setup Node.js environment",
		Inputs: map[string]ActionMetadataInputRequired{
			"always-auth":  false,
			"node-version": false,
			"registry-url": false,
			"scope":        false,
			"version":      false,
		},
	},
	"actions/setup-node@v2": {
		Name: "Setup Node.js environment",
		Inputs: map[string]ActionMetadataInputRequired{
			"always-auth":           false,
			"architecture":          false,
			"cache":                 false,
			"cache-dependency-path": false,
			"check-latest":          false,
			"node-version":          false,
			"registry-url":          false,
			"scope":                 false,
			"token":                 false,
			"version":               false,
		},
	},
	"actions/setup-python@v1": {
		Name: "Setup Python",
		Inputs: map[string]ActionMetadataInputRequired{
			"architecture":   false,
			"python-version": false,
		},
		Outputs: map[string]struct{}{
			"python-version": {},
		},
	},
	"actions/setup-python@v2": {
		Name: "Setup Python",
		Inputs: map[string]ActionMetadataInputRequired{
			"architecture":   false,
			"python-version": false,
			"token":          false,
		},
		Outputs: map[string]struct{}{
			"python-version": {},
		},
	},
	"actions/stale@v1": {
		Name: "Close Stale Issues",
		Inputs: map[string]ActionMetadataInputRequired{
			"days-before-close":   false,
			"days-before-stale":   false,
			"exempt-issue-label":  false,
			"exempt-pr-label":     false,
			"operations-per-run":  false,
			"repo-token":          true,
			"stale-issue-label":   false,
			"stale-issue-message": false,
			"stale-pr-label":      false,
			"stale-pr-message":    false,
		},
	},
	"actions/stale@v2": {
		Name: "Close Stale Issues",
		Inputs: map[string]ActionMetadataInputRequired{
			"days-before-close":   false,
			"days-before-stale":   false,
			"debug-only":          false,
			"exempt-issue-labels": false,
			"exempt-pr-labels":    false,
			"only-labels":         false,
			"operations-per-run":  false,
			"repo-token":          true,
			"stale-issue-label":   false,
			"stale-issue-message": false,
			"stale-pr-label":      false,
			"stale-pr-message":    false,
		},
	},
	"actions/stale@v3": {
		Name: "Close Stale Issues",
		Inputs: map[string]ActionMetadataInputRequired{
			"any-of-issue-labels":             false,
			"any-of-labels":                   false,
			"any-of-pr-labels":                false,
			"ascending":                       false,
			"close-issue-label":               false,
			"close-issue-message":             false,
			"close-pr-label":                  false,
			"close-pr-message":                false,
			"days-before-close":               false,
			"days-before-issue-close":         false,
			"days-before-issue-stale":         false,
			"days-before-pr-close":            false,
			"days-before-pr-stale":            false,
			"days-before-stale":               false,
			"debug-only":                      false,
			"delete-branch":                   false,
			"enable-statistics":               false,
			"exempt-all-assignees":            false,
			"exempt-all-issue-assignees":      false,
			"exempt-all-issue-milestones":     false,
			"exempt-all-milestones":           false,
			"exempt-all-pr-assignees":         false,
			"exempt-all-pr-milestones":        false,
			"exempt-assignees":                false,
			"exempt-issue-assignees":          false,
			"exempt-issue-labels":             false,
			"exempt-issue-milestones":         false,
			"exempt-milestones":               false,
			"exempt-pr-assignees":             false,
			"exempt-pr-labels":                false,
			"exempt-pr-milestones":            false,
			"only-issue-labels":               false,
			"only-labels":                     false,
			"only-pr-labels":                  false,
			"operations-per-run":              false,
			"remove-issue-stale-when-updated": false,
			"remove-pr-stale-when-updated":    false,
			"remove-stale-when-updated":       false,
			"repo-token":                      false,
			"skip-stale-issue-message":        false,
			"skip-stale-pr-message":           false,
			"stale-issue-label":               false,
			"stale-issue-message":             false,
			"stale-pr-label":                  false,
			"stale-pr-message":                false,
			"start-date":                      false,
		},
	},
	"actions/stale@v4": {
		Name: "Close Stale Issues",
		Inputs: map[string]ActionMetadataInputRequired{
			"any-of-issue-labels":             false,
			"any-of-labels":                   false,
			"any-of-pr-labels":                false,
			"ascending":                       false,
			"close-issue-label":               false,
			"close-issue-message":             false,
			"close-pr-label":                  false,
			"close-pr-message":                false,
			"days-before-close":               false,
			"days-before-issue-close":         false,
			"days-before-issue-stale":         false,
			"days-before-pr-close":            false,
			"days-before-pr-stale":            false,
			"days-before-stale":               false,
			"debug-only":                      false,
			"delete-branch":                   false,
			"enable-statistics":               false,
			"exempt-all-assignees":            false,
			"exempt-all-issue-assignees":      false,
			"exempt-all-issue-milestones":     false,
			"exempt-all-milestones":           false,
			"exempt-all-pr-assignees":         false,
			"exempt-all-pr-milestones":        false,
			"exempt-assignees":                false,
			"exempt-issue-assignees":          false,
			"exempt-issue-labels":             false,
			"exempt-issue-milestones":         false,
			"exempt-milestones":               false,
			"exempt-pr-assignees":             false,
			"exempt-pr-labels":                false,
			"exempt-pr-milestones":            false,
			"only-issue-labels":               false,
			"only-labels":                     false,
			"only-pr-labels":                  false,
			"operations-per-run":              false,
			"remove-issue-stale-when-updated": false,
			"remove-pr-stale-when-updated":    false,
			"remove-stale-when-updated":       false,
			"repo-token":                      false,
			"stale-issue-label":               false,
			"stale-issue-message":             false,
			"stale-pr-label":                  false,
			"stale-pr-message":                false,
			"start-date":                      false,
		},
		Outputs: map[string]struct{}{
			"closed-issues-prs": {},
			"staled-issues-prs": {},
		},
	},
	"actions/upload-artifact@v1": {
		Name: "Upload a Build Artifact",
		Inputs: map[string]ActionMetadataInputRequired{
			"name": true,
			"path": true,
		},
	},
	"actions/upload-artifact@v2": {
		Name: "Upload a Build Artifact",
		Inputs: map[string]ActionMetadataInputRequired{
			"if-no-files-found": false,
			"name":              false,
			"path":              true,
			"retention-days":    false,
		},
	},
	"aws-actions/configure-aws-credentials@v1": {
		Name: "\"Configure AWS Credentials\" Action For GitHub Actions",
		Inputs: map[string]ActionMetadataInputRequired{
			"aws-access-key-id":         false,
			"aws-region":                true,
			"aws-secret-access-key":     false,
			"aws-session-token":         false,
			"mask-aws-account-id":       false,
			"role-duration-seconds":     false,
			"role-external-id":          false,
			"role-session-name":         false,
			"role-skip-session-tagging": false,
			"role-to-assume":            false,
		},
		Outputs: map[string]struct{}{
			"aws-account-id": {},
		},
	},
	"azure/aks-set-context@v1": {
		Name: "Azure Kubernetes set context",
		Inputs: map[string]ActionMetadataInputRequired{
			"cluster-name":   false,
			"creds":          false,
			"resource-group": false,
		},
	},
	"azure/login@v1": {
		Name: "Azure Login",
		Inputs: map[string]ActionMetadataInputRequired{
			"allow-no-subscriptions": false,
			"creds":                  true,
			"enable-AzPSSession":     false,
			"environment":            false,
		},
	},
	"bahmutov/npm-install@v1": {
		Name: "NPM or Yarn install with caching",
		Inputs: map[string]ActionMetadataInputRequired{
			"install-command":   false,
			"useLockFile":       false,
			"useRollingCache":   false,
			"working-directory": false,
		},
	},
	"codecov/codecov-action@v1": {
		Name: "Codecov",
		Inputs: map[string]ActionMetadataInputRequired{
			"aws_curl_args":          false,
			"codecov_curl_args":      false,
			"commit_parent":          false,
			"directory":              false,
			"env_vars":               false,
			"fail_ci_if_error":       false,
			"file":                   false,
			"files":                  false,
			"flags":                  false,
			"functionalities":        false,
			"gcov_args":              false,
			"gcov_executable":        false,
			"gcov_path_exclude":      false,
			"gcov_path_include":      false,
			"gcov_prefix":            false,
			"gcov_root_dir":          false,
			"move_coverage_to_trash": false,
			"name":                   false,
			"network_filter":         false,
			"override_branch":        false,
			"override_build":         false,
			"override_commit":        false,
			"override_pr":            false,
			"override_tag":           false,
			"path_to_write_report":   false,
			"root_dir":               false,
			"token":                  false,
			"verbose":                false,
			"working-directory":      false,
			"xcode_derived_data":     false,
			"xcode_package":          false,
		},
	},
	"codecov/codecov-action@v2": {
		Name: "Codecov",
		Inputs: map[string]ActionMetadataInputRequired{
			"commit_parent":          false,
			"directory":              false,
			"dry_run":                false,
			"env_vars":               false,
			"fail_ci_if_error":       false,
			"file":                   false,
			"files":                  false,
			"flags":                  false,
			"functionalities":        false,
			"move_coverage_to_trash": false,
			"name":                   false,
			"override_branch":        false,
			"override_build":         false,
			"override_commit":        false,
			"override_pr":            false,
			"override_tag":           false,
			"root_dir":               false,
			"slug":                   false,
			"token":                  false,
			"url":                    false,
			"verbose":                false,
			"working-directory":      false,
		},
	},
	"dawidd6/action-download-artifact@v2": {
		Name: "Download workflow artifact",
		Inputs: map[string]ActionMetadataInputRequired{
			"branch":              false,
			"commit":              false,
			"event":               false,
			"github_token":        false,
			"name":                false,
			"path":                false,
			"pr":                  false,
			"repo":                false,
			"run_id":              false,
			"run_number":          false,
			"workflow":            true,
			"workflow_conclusion": false,
		},
	},
	"dawidd6/action-send-mail@v1": {
		Name: "Send email",
		Inputs: map[string]ActionMetadataInputRequired{
			"body":           true,
			"content_type":   false,
			"from":           true,
			"password":       true,
			"server_address": true,
			"server_port":    true,
			"subject":        true,
			"to":             true,
			"username":       true,
		},
	},
	"dawidd6/action-send-mail@v2": {
		Name: "Send email",
		Inputs: map[string]ActionMetadataInputRequired{
			"attachments":      false,
			"bcc":              false,
			"body":             true,
			"cc":               false,
			"content_type":     false,
			"convert_markdown": false,
			"from":             true,
			"ignore_cert":      false,
			"password":         true,
			"reply_to":         false,
			"server_address":   true,
			"server_port":      true,
			"subject":          true,
			"to":               true,
			"username":         true,
		},
	},
	"dawidd6/action-send-mail@v3": {
		Name: "Send email",
		Inputs: map[string]ActionMetadataInputRequired{
			"attachments":      false,
			"bcc":              false,
			"body":             false,
			"cc":               false,
			"convert_markdown": false,
			"from":             true,
			"html_body":        false,
			"ignore_cert":      false,
			"password":         false,
			"priority":         false,
			"reply_to":         false,
			"secure":           false,
			"server_address":   true,
			"server_port":      true,
			"subject":          true,
			"to":               true,
			"username":         false,
		},
	},
	"dessant/lock-threads@v2": {
		Name: "Lock Threads",
		Inputs: map[string]ActionMetadataInputRequired{
			"github-token":                 false,
			"issue-exclude-created-before": false,
			"issue-exclude-labels":         false,
			"issue-lock-comment":           false,
			"issue-lock-inactive-days":     false,
			"issue-lock-labels":            false,
			"issue-lock-reason":            false,
			"pr-exclude-created-before":    false,
			"pr-exclude-labels":            false,
			"pr-lock-comment":              false,
			"pr-lock-inactive-days":        false,
			"pr-lock-labels":               false,
			"pr-lock-reason":               false,
			"process-only":                 false,
		},
		Outputs: map[string]struct{}{
			"issues": {},
			"prs":    {},
		},
	},
	"docker/build-push-action@v1": {
		Name: "Build and push Docker images",
		Inputs: map[string]ActionMetadataInputRequired{
			"add_git_labels": false,
			"always_pull":    false,
			"build_args":     false,
			"cache_froms":    false,
			"dockerfile":     false,
			"labels":         false,
			"password":       false,
			"path":           false,
			"push":           false,
			"registry":       false,
			"repository":     true,
			"tag_with_ref":   false,
			"tag_with_sha":   false,
			"tags":           false,
			"target":         false,
			"username":       false,
		},
	},
	"docker/build-push-action@v2": {
		Name: "Build and push Docker images",
		Inputs: map[string]ActionMetadataInputRequired{
			"allow":        false,
			"build-args":   false,
			"builder":      false,
			"cache-from":   false,
			"cache-to":     false,
			"context":      false,
			"file":         false,
			"github-token": false,
			"labels":       false,
			"load":         false,
			"network":      false,
			"no-cache":     false,
			"outputs":      false,
			"platforms":    false,
			"pull":         false,
			"push":         false,
			"secret-files": false,
			"secrets":      false,
			"ssh":          false,
			"tags":         false,
			"target":       false,
		},
		Outputs: map[string]struct{}{
			"digest": {},
		},
	},
	"docker/login-action@v1": {
		Name: "Docker Login",
		Inputs: map[string]ActionMetadataInputRequired{
			"logout":   false,
			"password": false,
			"registry": false,
			"username": false,
		},
	},
	"docker/metadata-action@v1": {
		Name: "Docker Meta",
		Inputs: map[string]ActionMetadataInputRequired{
			"github-token":     false,
			"images":           true,
			"label-custom":     false,
			"sep-labels":       false,
			"sep-tags":         false,
			"tag-custom":       false,
			"tag-custom-only":  false,
			"tag-edge":         false,
			"tag-edge-branch":  false,
			"tag-latest":       false,
			"tag-match":        false,
			"tag-match-group":  false,
			"tag-match-latest": false,
			"tag-schedule":     false,
			"tag-semver":       false,
			"tag-sha":          false,
		},
		Outputs: map[string]struct{}{
			"bake-file": {},
			"labels":    {},
			"tags":      {},
			"version":   {},
		},
	},
	"docker/metadata-action@v2": {
		Name: "Docker Meta",
		Inputs: map[string]ActionMetadataInputRequired{
			"bake-target":  false,
			"flavor":       false,
			"github-token": false,
			"images":       true,
			"labels":       false,
			"sep-labels":   false,
			"sep-tags":     false,
			"tags":         false,
		},
		Outputs: map[string]struct{}{
			"bake-file": {},
			"labels":    {},
			"tags":      {},
			"version":   {},
		},
	},
	"docker/metadata-action@v3": {
		Name: "Docker Metadata action",
		Inputs: map[string]ActionMetadataInputRequired{
			"bake-target":  false,
			"flavor":       false,
			"github-token": false,
			"images":       true,
			"labels":       false,
			"sep-labels":   false,
			"sep-tags":     false,
			"tags":         false,
		},
		Outputs: map[string]struct{}{
			"bake-file": {},
			"labels":    {},
			"tags":      {},
			"version":   {},
		},
	},
	"docker/setup-buildx-action@v1": {
		Name: "Docker Setup Buildx",
		Inputs: map[string]ActionMetadataInputRequired{
			"buildkitd-flags": false,
			"config":          false,
			"driver":          false,
			"driver-opts":     false,
			"endpoint":        false,
			"install":         false,
			"use":             false,
			"version":         false,
		},
		Outputs: map[string]struct{}{
			"driver":    {},
			"endpoint":  {},
			"flags":     {},
			"name":      {},
			"platforms": {},
			"status":    {},
		},
	},
	"docker/setup-qemu-action@v1": {
		Name: "Docker Setup QEMU",
		Inputs: map[string]ActionMetadataInputRequired{
			"image":     false,
			"platforms": false,
		},
		Outputs: map[string]struct{}{
			"platforms": {},
		},
	},
	"dorny/paths-filter@v1": {
		Name: "Pull request changed files filter",
		Inputs: map[string]ActionMetadataInputRequired{
			"filters": true,
			"token":   false,
		},
		SkipOutputs: true,
	},
	"dorny/paths-filter@v2": {
		Name: "Paths Changes Filter",
		Inputs: map[string]ActionMetadataInputRequired{
			"base":                false,
			"filters":             true,
			"initial-fetch-depth": false,
			"list-files":          false,
			"ref":                 false,
			"token":               false,
			"working-directory":   false,
		},
		SkipOutputs: true,
	},
	"enriikke/gatsby-gh-pages-action@v2": {
		Name: "Gatsby Publish",
		Inputs: map[string]ActionMetadataInputRequired{
			"access-token":     true,
			"commit-message":   false,
			"deploy-branch":    false,
			"deploy-repo":      false,
			"gatsby-args":      false,
			"git-config-email": false,
			"git-config-name":  false,
			"skip-publish":     false,
			"working-dir":      false,
		},
	},
	"erlef/setup-beam@v1": {
		Name: "Setup Erlang/OTP with optional Elixir (and mix) and/or rebar3",
		Inputs: map[string]ActionMetadataInputRequired{
			"elixir-version": false,
			"gleam-version":  false,
			"install-hex":    false,
			"install-rebar":  false,
			"otp-version":    false,
			"rebar3-version": false,
			"version-type":   false,
		},
		Outputs: map[string]struct{}{
			"elixir-version": {},
			"gleam-version":  {},
			"otp-version":    {},
			"rebar3-version": {},
		},
	},
	"game-ci/unity-builder@v2": {
		Name: "Unity - Builder",
		Inputs: map[string]ActionMetadataInputRequired{
			"allowDirtyBuild":       false,
			"androidAppBundle":      false,
			"androidKeyaliasName":   false,
			"androidKeyaliasPass":   false,
			"androidKeystoreBase64": false,
			"androidKeystoreName":   false,
			"androidKeystorePass":   false,
			"androidVersionCode":    false,
			"awsStackName":          false,
			"buildMethod":           false,
			"buildName":             false,
			"buildsPath":            false,
			"chownFilesTo":          false,
			"customImage":           false,
			"customParameters":      false,
			"githubToken":           false,
			"kubeConfig":            false,
			"kubeVolume":            false,
			"kubeVolumeSize":        false,
			"projectPath":           false,
			"remoteBuildCluster":    false,
			"remoteBuildCpu":        false,
			"remoteBuildMemory":     false,
			"sshAgent":              false,
			"targetPlatform":        false,
			"unityVersion":          false,
			"version":               false,
			"versioning":            false,
		},
		Outputs: map[string]struct{}{
			"buildVersion": {},
			"volume":       {},
		},
	},
	"getsentry/paths-filter@v1": {
		Name: "Pull request changed files filter",
		Inputs: map[string]ActionMetadataInputRequired{
			"filters": true,
			"token":   false,
		},
		SkipOutputs: true,
	},
	"getsentry/paths-filter@v2": {
		Name: "Paths Changes Filter",
		Inputs: map[string]ActionMetadataInputRequired{
			"base":                false,
			"filters":             true,
			"initial-fetch-depth": false,
			"list-files":          false,
			"ref":                 false,
			"token":               false,
			"working-directory":   false,
		},
		SkipOutputs: true,
	},
	"github/codeql-action/analyze@v1": {
		Name: "CodeQL: Finish",
		Inputs: map[string]ActionMetadataInputRequired{
			"add-snippets":    false,
			"category":        false,
			"check_name":      false,
			"checkout_path":   false,
			"cleanup-level":   false,
			"matrix":          false,
			"output":          false,
			"ram":             false,
			"skip-queries":    false,
			"threads":         false,
			"token":           false,
			"upload":          false,
			"upload-database": false,
		},
		Outputs: map[string]struct{}{
			"db-locations": {},
		},
	},
	"github/codeql-action/autobuild@v1": {
		Name: "CodeQL: Autobuild",
		Inputs: map[string]ActionMetadataInputRequired{
			"matrix": false,
			"token":  false,
		},
	},
	"github/codeql-action/init@v1": {
		Name: "CodeQL: Init",
		Inputs: map[string]ActionMetadataInputRequired{
			"config-file":               false,
			"db-location":               false,
			"external-repository-token": false,
			"languages":                 false,
			"matrix":                    false,
			"packs":                     false,
			"queries":                   false,
			"setup-python-dependencies": false,
			"source-root":               false,
			"token":                     false,
			"tools":                     false,
		},
		Outputs: map[string]struct{}{
			"codeql-path": {},
		},
	},
	"github/super-linter@v3": {
		Name: "Super-Linter",
	},
	"github/super-linter@v4": {
		Name: "Super-Linter",
	},
	"githubocto/flat@v1": {
		Name: "Flat Data",
		Inputs: map[string]ActionMetadataInputRequired{
			"http_url":         false,
			"outfile_basename": false,
			"postprocess":      false,
			"sql_connstring":   false,
			"sql_format":       false,
			"sql_queryfile":    false,
		},
		Outputs: map[string]struct{}{
			"delta_bytes": {},
		},
	},
	"githubocto/flat@v2": {
		Name: "Flat Data",
		Inputs: map[string]ActionMetadataInputRequired{
			"downloaded_filename": false,
			"http_url":            false,
			"postprocess":         false,
			"sql_connstring":      false,
			"sql_queryfile":       false,
		},
		Outputs: map[string]struct{}{
			"delta_bytes": {},
		},
	},
	"githubocto/flat@v3": {
		Name: "Flat Data",
		Inputs: map[string]ActionMetadataInputRequired{
			"authorization":       false,
			"axios_config":        false,
			"downloaded_filename": false,
			"http_url":            false,
			"mask":                false,
			"postprocess":         false,
			"sql_connstring":      false,
			"sql_queryfile":       false,
			"typeorm_config":      false,
		},
		Outputs: map[string]struct{}{
			"delta_bytes": {},
		},
	},
	"golangci/golangci-lint-action@v1": {
		Name: "Run golangci-lint",
		Inputs: map[string]ActionMetadataInputRequired{
			"args":              false,
			"github-token":      false,
			"only-new-issues":   false,
			"version":           true,
			"working-directory": false,
		},
	},
	"golangci/golangci-lint-action@v2": {
		Name: "Run golangci-lint",
		Inputs: map[string]ActionMetadataInputRequired{
			"args":                 false,
			"github-token":         false,
			"only-new-issues":      false,
			"skip-build-cache":     false,
			"skip-go-installation": false,
			"skip-pkg-cache":       false,
			"version":              false,
			"working-directory":    false,
		},
	},
	"goreleaser/goreleaser-action@v1": {
		Name: "GoReleaser Action",
		Inputs: map[string]ActionMetadataInputRequired{
			"args":    false,
			"key":     false,
			"version": false,
			"workdir": false,
		},
	},
	"goreleaser/goreleaser-action@v2": {
		Name: "GoReleaser Action",
		Inputs: map[string]ActionMetadataInputRequired{
			"args":         false,
			"distribution": false,
			"install-only": false,
			"version":      false,
			"workdir":      false,
		},
	},
	"gradle/wrapper-validation-action@v1": {
		Name: "Gradle Wrapper Validation",
		Inputs: map[string]ActionMetadataInputRequired{
			"allow-checksums":   false,
			"allow-snapshots":   false,
			"min-wrapper-count": false,
		},
	},
	"haskell/actions/setup@v1": {
		Name: "Setup Haskell",
		Inputs: map[string]ActionMetadataInputRequired{
			"cabal-version":   false,
			"disable-matcher": false,
			"enable-stack":    false,
			"ghc-version":     false,
			"stack-no-global": false,
			"stack-setup-ghc": false,
			"stack-version":   false,
		},
		Outputs: map[string]struct{}{
			"cabal-exe":   {},
			"cabal-path":  {},
			"cabal-store": {},
			"ghc-exe":     {},
			"ghc-path":    {},
			"stack-exe":   {},
			"stack-path":  {},
			"stack-root":  {},
		},
	},
	"marvinpinto/action-automatic-releases@latest": {
		Name: "Automatic Releases",
		Inputs: map[string]ActionMetadataInputRequired{
			"automatic_release_tag": false,
			"draft":                 false,
			"files":                 false,
			"prerelease":            false,
			"repo_token":            true,
			"title":                 false,
		},
		Outputs: map[string]struct{}{
			"automatic_releases_tag": {},
			"upload_url":             {},
		},
	},
	"microsoft/playwright-github-action@v1": {
		Name: "Run Playwright tests",
	},
	"mikepenz/release-changelog-builder-action@v1": {
		Name: "Release Changelog Builder",
		Inputs: map[string]ActionMetadataInputRequired{
			"commitMode":        false,
			"configuration":     false,
			"failOnError":       false,
			"fromTag":           false,
			"ignorePreReleases": false,
			"outputFile":        false,
			"owner":             false,
			"path":              false,
			"repo":              false,
			"toTag":             false,
			"token":             false,
		},
		Outputs: map[string]struct{}{
			"changelog": {},
			"failed":    {},
			"fromTag":   {},
			"owner":     {},
			"repo":      {},
			"toTag":     {},
		},
	},
	"mikepenz/release-changelog-builder-action@v2": {
		Name: "Release Changelog Builder",
		Inputs: map[string]ActionMetadataInputRequired{
			"commitMode":        false,
			"configuration":     false,
			"failOnError":       false,
			"fromTag":           false,
			"ignorePreReleases": false,
			"outputFile":        false,
			"owner":             false,
			"path":              false,
			"repo":              false,
			"toTag":             false,
			"token":             false,
		},
		Outputs: map[string]struct{}{
			"changelog": {},
			"failed":    {},
			"fromTag":   {},
			"owner":     {},
			"repo":      {},
			"toTag":     {},
		},
	},
	"msys2/setup-msys2@v1": {
		Name: "Setup MSYS2 environment",
		Inputs: map[string]ActionMetadataInputRequired{
			"cache":     false,
			"install":   false,
			"msystem":   false,
			"path-type": false,
			"release":   false,
			"update":    false,
		},
	},
	"msys2/setup-msys2@v2": {
		Name: "Setup MSYS2",
		Inputs: map[string]ActionMetadataInputRequired{
			"install":   false,
			"msystem":   false,
			"path-type": false,
			"release":   false,
			"update":    false,
		},
	},
	"ncipollo/release-action@v1": {
		Name: "Create Release",
		Inputs: map[string]ActionMetadataInputRequired{
			"allowUpdates":               false,
			"artifact":                   false,
			"artifactContentType":        false,
			"artifactErrorsFailBuild":    false,
			"artifacts":                  false,
			"body":                       false,
			"bodyFile":                   false,
			"commit":                     false,
			"discussionCategory":         false,
			"draft":                      false,
			"name":                       false,
			"omitBody":                   false,
			"omitBodyDuringUpdate":       false,
			"omitName":                   false,
			"omitNameDuringUpdate":       false,
			"omitPrereleaseDuringUpdate": false,
			"owner":                      false,
			"prerelease":                 false,
			"replacesArtifacts":          false,
			"repo":                       false,
			"tag":                        false,
			"token":                      false,
		},
		Outputs: map[string]struct{}{
			"html_url":   {},
			"id":         {},
			"upload_url": {},
		},
	},
	"nwtgck/actions-netlify@v1": {
		Name: "Netlify Actions",
		Inputs: map[string]ActionMetadataInputRequired{
			"alias":                           false,
			"deploy-message":                  false,
			"enable-commit-comment":           false,
			"enable-commit-status":            false,
			"enable-pull-request-comment":     false,
			"fails-without-credentials":       false,
			"functions-dir":                   false,
			"github-deployment-description":   false,
			"github-deployment-environment":   false,
			"github-token":                    false,
			"netlify-config-path":             false,
			"overwrites-pull-request-comment": false,
			"production-branch":               false,
			"production-deploy":               false,
			"publish-dir":                     true,
		},
		Outputs: map[string]struct{}{
			"deploy-url": {},
		},
	},
	"octokit/request-action@v1.x": {
		Name:       "GitHub API Request",
		SkipInputs: true,
		Outputs: map[string]struct{}{
			"data":    {},
			"headers": {},
			"status":  {},
		},
	},
	"octokit/request-action@v2.x": {
		Name:       "GitHub API Request",
		SkipInputs: true,
		Outputs: map[string]struct{}{
			"data":    {},
			"headers": {},
			"status":  {},
		},
	},
	"peaceiris/actions-gh-pages@v2": {
		Name: "GitHub Pages action",
		Inputs: map[string]ActionMetadataInputRequired{
			"commitMessage": false,
			"emptyCommits":  false,
			"forceOrphan":   false,
			"keepFiles":     false,
			"tagMessage":    false,
			"tagName":       false,
			"tagOverwrite":  false,
			"useremail":     false,
			"username":      false,
		},
	},
	"peaceiris/actions-gh-pages@v3": {
		Name: "GitHub Pages action",
		Inputs: map[string]ActionMetadataInputRequired{
			"allow_empty_commit":  false,
			"cname":               false,
			"commit_message":      false,
			"deploy_key":          false,
			"destination_dir":     false,
			"disable_nojekyll":    false,
			"enable_jekyll":       false,
			"exclude_assets":      false,
			"external_repository": false,
			"force_orphan":        false,
			"full_commit_message": false,
			"github_token":        false,
			"keep_files":          false,
			"personal_token":      false,
			"publish_branch":      false,
			"publish_dir":         false,
			"tag_message":         false,
			"tag_name":            false,
			"user_email":          false,
			"user_name":           false,
		},
	},
	"peter-evans/create-pull-request@v1": {
		Name: "Create Pull Request",
		Inputs: map[string]ActionMetadataInputRequired{
			"assignees":       false,
			"author-email":    false,
			"author-name":     false,
			"base":            false,
			"body":            false,
			"branch":          false,
			"branch-suffix":   false,
			"commit-message":  false,
			"committer-email": false,
			"committer-name":  false,
			"labels":          false,
			"milestone":       false,
			"project":         false,
			"project-column":  false,
			"reviewers":       false,
			"team-reviewers":  false,
			"title":           false,
			"token":           true,
		},
		Outputs: map[string]struct{}{
			"pr_number": {},
		},
	},
	"peter-evans/create-pull-request@v2": {
		Name: "Create Pull Request",
		Inputs: map[string]ActionMetadataInputRequired{
			"assignees":         false,
			"author":            false,
			"base":              false,
			"body":              false,
			"branch":            false,
			"branch-suffix":     false,
			"commit-message":    false,
			"committer":         false,
			"draft":             false,
			"labels":            false,
			"milestone":         false,
			"path":              false,
			"project":           false,
			"project-column":    false,
			"request-to-parent": false,
			"reviewers":         false,
			"team-reviewers":    false,
			"title":             false,
			"token":             false,
		},
		Outputs: map[string]struct{}{
			"pull-request-number": {},
		},
	},
	"peter-evans/create-pull-request@v3": {
		Name: "Create Pull Request",
		Inputs: map[string]ActionMetadataInputRequired{
			"assignees":      false,
			"author":         false,
			"base":           false,
			"body":           false,
			"branch":         false,
			"branch-suffix":  false,
			"commit-message": false,
			"committer":      false,
			"delete-branch":  false,
			"draft":          false,
			"labels":         false,
			"milestone":      false,
			"path":           false,
			"push-to-fork":   false,
			"reviewers":      false,
			"signoff":        false,
			"team-reviewers": false,
			"title":          false,
			"token":          false,
		},
		Outputs: map[string]struct{}{
			"pull-request-number": {},
		},
	},
	"preactjs/compressed-size-action@v1": {
		Name: "compressed-size-action",
		Inputs: map[string]ActionMetadataInputRequired{
			"build-script":       false,
			"collapse-unchanged": false,
			"compression":        false,
			"omit-unchanged":     false,
			"repo-token":         true,
			"show-total":         false,
		},
	},
	"preactjs/compressed-size-action@v2": {
		Name: "compressed-size-action",
		Inputs: map[string]ActionMetadataInputRequired{
			"build-script":             false,
			"clean-script":             false,
			"collapse-unchanged":       false,
			"compression":              false,
			"cwd":                      false,
			"exclude":                  false,
			"minimum-change-threshold": false,
			"omit-unchanged":           false,
			"pattern":                  false,
			"repo-token":               false,
			"show-total":               false,
			"strip-hash":               false,
			"use-check":                false,
		},
	},
	"reviewdog/action-actionlint@v1": {
		Name: "actionlint with reviewdog",
		Inputs: map[string]ActionMetadataInputRequired{
			"actionlint_flags": false,
			"fail_on_error":    false,
			"filter_mode":      false,
			"github_token":     false,
			"level":            false,
			"reporter":         false,
			"reviewdog_flags":  false,
			"tool_name":        false,
		},
	},
	"reviewdog/action-eslint@v1": {
		Name: "Run eslint with reviewdog",
		Inputs: map[string]ActionMetadataInputRequired{
			"eslint_flags":    false,
			"fail_on_error":   false,
			"filter_mode":     false,
			"github_token":    false,
			"level":           false,
			"reporter":        false,
			"reviewdog_flags": false,
			"tool_name":       false,
			"workdir":         false,
		},
	},
	"reviewdog/action-golangci-lint@v1": {
		Name: "Run golangci-lint with reviewdog",
		Inputs: map[string]ActionMetadataInputRequired{
			"fail_on_error":       false,
			"filter_mode":         false,
			"github_token":        false,
			"golangci_lint_flags": false,
			"level":               false,
			"reporter":            false,
			"reviewdog_flags":     false,
			"tool_name":           false,
			"workdir":             false,
		},
	},
	"reviewdog/action-golangci-lint@v2": {
		Name: "Run golangci-lint with reviewdog",
		Inputs: map[string]ActionMetadataInputRequired{
			"cache":                 false,
			"fail_on_error":         false,
			"filter_mode":           false,
			"github_token":          false,
			"go_version":            false,
			"golangci_lint_flags":   false,
			"golangci_lint_version": false,
			"level":                 false,
			"reporter":              false,
			"reviewdog_flags":       false,
			"reviewdog_version":     false,
			"tool_name":             false,
			"workdir":               false,
		},
	},
	"reviewdog/action-hadolint@v1": {
		Name: "Run hadolint with reviewdog",
		Inputs: map[string]ActionMetadataInputRequired{
			"exclude":         false,
			"fail_on_error":   false,
			"filter_mode":     false,
			"github_token":    false,
			"hadolint_flags":  false,
			"hadolint_ignore": false,
			"level":           false,
			"reporter":        false,
			"reviewdog_flags": false,
			"tool_name":       false,
		},
	},
	"reviewdog/action-misspell@v1": {
		Name: "Run misspell with reviewdog",
		Inputs: map[string]ActionMetadataInputRequired{
			"exclude":       false,
			"fail_on_error": false,
			"filter_mode":   false,
			"github_token":  false,
			"ignore":        false,
			"level":         false,
			"locale":        false,
			"path":          false,
			"pattern":       false,
			"reporter":      false,
		},
	},
	"reviewdog/action-rubocop@v1": {
		Name: "Run rubocop with reviewdog",
		Inputs: map[string]ActionMetadataInputRequired{
			"fail_on_error":      false,
			"filter_mode":        false,
			"github_token":       true,
			"level":              false,
			"reporter":           false,
			"reviewdog_flags":    false,
			"rubocop_extensions": false,
			"rubocop_flags":      false,
			"rubocop_version":    false,
			"tool_name":          false,
			"workdir":            false,
		},
	},
	"reviewdog/action-shellcheck@v1": {
		Name: "Run shellcheck with reviewdog",
		Inputs: map[string]ActionMetadataInputRequired{
			"exclude":          false,
			"fail_on_error":    false,
			"filter_mode":      false,
			"github_token":     false,
			"level":            false,
			"path":             false,
			"pattern":          false,
			"reporter":         false,
			"reviewdog_flags":  false,
			"shellcheck_flags": false,
		},
	},
	"reviewdog/action-tflint@v1": {
		Name: "Run tflint with reviewdog",
		Inputs: map[string]ActionMetadataInputRequired{
			"fail_on_error":     false,
			"filter_mode":       false,
			"flags":             false,
			"github_token":      true,
			"level":             false,
			"reporter":          false,
			"tflint_rulesets":   false,
			"tflint_version":    false,
			"working_directory": false,
		},
		Outputs: map[string]struct{}{
			"reviewdog-return-code": {},
			"tflint-return-code":    {},
		},
	},
	"rhysd/action-setup-vim@v1": {
		Name: "Setup Vim",
		Inputs: map[string]ActionMetadataInputRequired{
			"neovim":  false,
			"token":   false,
			"version": false,
		},
		Outputs: map[string]struct{}{
			"executable": {},
		},
	},
	"ridedott/merge-me-action@v1": {
		Name: "Merge me!",
		Inputs: map[string]ActionMetadataInputRequired{
			"GITHUB_LOGIN": false,
			"GITHUB_TOKEN": true,
			"MERGE_METHOD": false,
			"PRESET":       false,
		},
	},
	"ridedott/merge-me-action@v2": {
		Name: "Merge me!",
		Inputs: map[string]ActionMetadataInputRequired{
			"ENABLED_FOR_MANUAL_CHANGES": false,
			"ENABLE_GITHUB_API_PREVIEW":  false,
			"GITHUB_LOGIN":               false,
			"GITHUB_TOKEN":               true,
			"MAXIMUM_RETRIES":            false,
			"MERGE_METHOD":               false,
			"PRESET":                     false,
		},
	},
	"rtCamp/action-slack-notify@v2": {
		Name: "Slack Notify",
	},
	"ruby/setup-ruby@v1": {
		Name: "Setup Ruby, JRuby and TruffleRuby",
		Inputs: map[string]ActionMetadataInputRequired{
			"bundler":           false,
			"bundler-cache":     false,
			"cache-version":     false,
			"ruby-version":      false,
			"working-directory": false,
		},
		Outputs: map[string]struct{}{
			"ruby-prefix": {},
		},
	},
	"shivammathur/setup-php@v1": {
		Name: "Setup PHP Action",
		Inputs: map[string]ActionMetadataInputRequired{
			"coverage":       false,
			"extension-csv":  false,
			"extensions":     false,
			"ini-values":     false,
			"ini-values-csv": false,
			"pecl":           false,
			"php-version":    false,
			"tools":          false,
		},
	},
	"shivammathur/setup-php@v2": {
		Name: "Setup PHP Action",
		Inputs: map[string]ActionMetadataInputRequired{
			"coverage":    false,
			"extensions":  false,
			"ini-values":  false,
			"php-version": false,
			"tools":       false,
		},
		Outputs: map[string]struct{}{
			"php-version": {},
		},
	},
	"softprops/action-gh-release@v1": {
		Name: "GH Release",
		Inputs: map[string]ActionMetadataInputRequired{
			"body":                     false,
			"body_path":                false,
			"discussion_category_name": false,
			"draft":                    false,
			"fail_on_unmatched_files":  false,
			"files":                    false,
			"name":                     false,
			"prerelease":               false,
			"repository":               false,
			"tag_name":                 false,
			"target_commitish":         false,
			"token":                    false,
		},
		Outputs: map[string]struct{}{
			"id":         {},
			"upload_url": {},
			"url":        {},
		},
	},
	"subosito/flutter-action@v1": {
		Name: "Flutter action",
		Inputs: map[string]ActionMetadataInputRequired{
			"channel":         false,
			"flutter-version": false,
		},
	},
	"treosh/lighthouse-ci-action@v1": {
		Name: "Lighthouse CI Action",
		Inputs: map[string]ActionMetadataInputRequired{
			"url":  false,
			"urls": false,
		},
		Outputs: map[string]struct{}{
			"resultsPath": {},
		},
	},
	"treosh/lighthouse-ci-action@v2": {
		Name: "Lighthouse CI Action",
		Inputs: map[string]ActionMetadataInputRequired{
			"budgetPath":             false,
			"configPath":             false,
			"runs":                   false,
			"serverBaseUrl":          false,
			"serverToken":            false,
			"temporaryPublicStorage": false,
			"uploadArtifacts":        false,
			"urls":                   false,
		},
		Outputs: map[string]struct{}{
			"resultsPath": {},
		},
	},
	"treosh/lighthouse-ci-action@v3": {
		Name: "Lighthouse CI Action",
		Inputs: map[string]ActionMetadataInputRequired{
			"basicAuthPassword":      false,
			"basicAuthUsername":      false,
			"budgetPath":             false,
			"configPath":             false,
			"runs":                   false,
			"serverBaseUrl":          false,
			"serverToken":            false,
			"temporaryPublicStorage": false,
			"uploadArtifacts":        false,
			"urls":                   false,
		},
		Outputs: map[string]struct{}{
			"assertionResults": {},
			"links":            {},
			"resultsPath":      {},
		},
	},
	"treosh/lighthouse-ci-action@v7": {
		Name: "Lighthouse CI Action",
		Inputs: map[string]ActionMetadataInputRequired{
			"basicAuthPassword":      false,
			"basicAuthUsername":      false,
			"budgetPath":             false,
			"configPath":             false,
			"runs":                   false,
			"serverBaseUrl":          false,
			"serverToken":            false,
			"temporaryPublicStorage": false,
			"uploadArtifacts":        false,
			"urls":                   false,
		},
		Outputs: map[string]struct{}{
			"assertionResults": {},
			"links":            {},
			"resultsPath":      {},
		},
	},
	"treosh/lighthouse-ci-action@v8": {
		Name: "Lighthouse CI Action",
		Inputs: map[string]ActionMetadataInputRequired{
			"artifactName":           false,
			"basicAuthPassword":      false,
			"basicAuthUsername":      false,
			"budgetPath":             false,
			"configPath":             false,
			"runs":                   false,
			"serverBaseUrl":          false,
			"serverToken":            false,
			"temporaryPublicStorage": false,
			"uploadArtifacts":        false,
			"urls":                   false,
		},
		Outputs: map[string]struct{}{
			"assertionResults": {},
			"links":            {},
			"resultsPath":      {},
		},
	},
	"wearerequired/lint-action@v1": {
		Name: "Lint Action",
		Inputs: map[string]ActionMetadataInputRequired{
			"auto_fix":                             false,
			"black":                                false,
			"black_args":                           false,
			"black_command_prefix":                 false,
			"black_dir":                            false,
			"black_extensions":                     false,
			"check_name":                           false,
			"commit_message":                       false,
			"continue_on_error":                    false,
			"eslint":                               false,
			"eslint_args":                          false,
			"eslint_command_prefix":                false,
			"eslint_dir":                           false,
			"eslint_extensions":                    false,
			"flake8":                               false,
			"flake8_args":                          false,
			"flake8_command_prefix":                false,
			"flake8_dir":                           false,
			"flake8_extensions":                    false,
			"git_email":                            false,
			"git_name":                             false,
			"github_token":                         false,
			"gofmt":                                false,
			"gofmt_args":                           false,
			"gofmt_command_prefix":                 false,
			"gofmt_dir":                            false,
			"gofmt_extensions":                     false,
			"golint":                               false,
			"golint_args":                          false,
			"golint_command_prefix":                false,
			"golint_dir":                           false,
			"golint_extensions":                    false,
			"mypy":                                 false,
			"mypy_args":                            false,
			"mypy_command_prefix":                  false,
			"mypy_dir":                             false,
			"mypy_extensions":                      false,
			"neutral_check_on_warning":             false,
			"oitnb":                                false,
			"oitnb_args":                           false,
			"oitnb_command_prefix":                 false,
			"oitnb_dir":                            false,
			"oitnb_extensions":                     false,
			"php_codesniffer":                      false,
			"php_codesniffer_args":                 false,
			"php_codesniffer_command_prefix":       false,
			"php_codesniffer_dir":                  false,
			"php_codesniffer_extensions":           false,
			"prettier":                             false,
			"prettier_args":                        false,
			"prettier_command_prefix":              false,
			"prettier_dir":                         false,
			"prettier_extensions":                  false,
			"rubocop":                              false,
			"rubocop_args":                         false,
			"rubocop_command_prefix":               false,
			"rubocop_dir":                          false,
			"rubocop_extensions":                   false,
			"stylelint":                            false,
			"stylelint_args":                       false,
			"stylelint_command_prefix":             false,
			"stylelint_dir":                        false,
			"stylelint_extensions":                 false,
			"swift_format_lockwood":                false,
			"swift_format_lockwood_args":           false,
			"swift_format_lockwood_command_prefix": false,
			"swift_format_lockwood_dir":            false,
			"swift_format_lockwood_extensions":     false,
			"swift_format_official":                false,
			"swift_format_official_args":           false,
			"swift_format_official_command_prefix": false,
			"swift_format_official_dir":            false,
			"swift_format_official_extensions":     false,
			"swiftformat":                          false,
			"swiftformat_args":                     false,
			"swiftformat_command_prefix":           false,
			"swiftformat_dir":                      false,
			"swiftformat_extensions":               false,
			"swiftlint":                            false,
			"swiftlint_args":                       false,
			"swiftlint_command_prefix":             false,
			"swiftlint_dir":                        false,
			"swiftlint_extensions":                 false,
			"xo":                                   false,
			"xo_args":                              false,
			"xo_command_prefix":                    false,
			"xo_dir":                               false,
			"xo_extensions":                        false,
		},
	},
}
